// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: gameroom.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const addGameRoomPlayer = `-- name: AddGameRoomPlayer :one
INSERT INTO game_room_players(game_room_id, player_id) values ($1, $2) returning game_room_id, player_id
`

type AddGameRoomPlayerParams struct {
	GameRoomID uuid.UUID `json:"game_room_id"`
	PlayerID   uuid.UUID `json:"player_id"`
}

func (q *Queries) AddGameRoomPlayer(ctx context.Context, arg AddGameRoomPlayerParams) (GameRoomPlayer, error) {
	row := q.queryRow(ctx, q.addGameRoomPlayerStmt, addGameRoomPlayer, arg.GameRoomID, arg.PlayerID)
	var i GameRoomPlayer
	err := row.Scan(&i.GameRoomID, &i.PlayerID)
	return i, err
}

const createGameRoom = `-- name: CreateGameRoom :one
INSERT INTO game_rooms(created_by) values ($1) returning game_room_id, created_by, created_at, closed_at
`

func (q *Queries) CreateGameRoom(ctx context.Context, createdBy uuid.UUID) (GameRoom, error) {
	row := q.queryRow(ctx, q.createGameRoomStmt, createGameRoom, createdBy)
	var i GameRoom
	err := row.Scan(
		&i.GameRoomID,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.ClosedAt,
	)
	return i, err
}

const getGameRoomAndPlayerRows = `-- name: GetGameRoomAndPlayerRows :many
SELECT game_rooms.game_room_id AS gameroom_id, game_rooms.created_at, game_rooms.created_by, game_rooms.closed_at, players.name, players.player_id
FROM game_rooms
         JOIN game_room_players ON game_room_players.game_room_id = game_rooms.game_room_id
         JOIN players ON players.player_id = game_room_players.player_id
WHERE game_rooms.game_room_id = $1
`

type GetGameRoomAndPlayerRowsRow struct {
	GameroomID uuid.UUID    `json:"gameroom_id"`
	CreatedAt  time.Time    `json:"created_at"`
	CreatedBy  uuid.UUID    `json:"created_by"`
	ClosedAt   sql.NullTime `json:"closed_at"`
	Name       string       `json:"name"`
	PlayerID   uuid.UUID    `json:"player_id"`
}

func (q *Queries) GetGameRoomAndPlayerRows(ctx context.Context, gameRoomID uuid.UUID) ([]GetGameRoomAndPlayerRowsRow, error) {
	rows, err := q.query(ctx, q.getGameRoomAndPlayerRowsStmt, getGameRoomAndPlayerRows, gameRoomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetGameRoomAndPlayerRowsRow{}
	for rows.Next() {
		var i GetGameRoomAndPlayerRowsRow
		if err := rows.Scan(
			&i.GameroomID,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.ClosedAt,
			&i.Name,
			&i.PlayerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
