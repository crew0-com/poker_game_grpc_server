// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0

package database

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addPlayerToGameRoomStmt, err = db.PrepareContext(ctx, addPlayerToGameRoom); err != nil {
		return nil, fmt.Errorf("error preparing query AddPlayerToGameRoom: %w", err)
	}
	if q.createGameStmt, err = db.PrepareContext(ctx, createGame); err != nil {
		return nil, fmt.Errorf("error preparing query CreateGame: %w", err)
	}
	if q.createGameRoomStmt, err = db.PrepareContext(ctx, createGameRoom); err != nil {
		return nil, fmt.Errorf("error preparing query CreateGameRoom: %w", err)
	}
	if q.createPlayerStmt, err = db.PrepareContext(ctx, createPlayer); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePlayer: %w", err)
	}
	if q.finishGameStmt, err = db.PrepareContext(ctx, finishGame); err != nil {
		return nil, fmt.Errorf("error preparing query FinishGame: %w", err)
	}
	if q.getGameStmt, err = db.PrepareContext(ctx, getGame); err != nil {
		return nil, fmt.Errorf("error preparing query GetGame: %w", err)
	}
	if q.getGameRoomAndPlayerRowsStmt, err = db.PrepareContext(ctx, getGameRoomAndPlayerRows); err != nil {
		return nil, fmt.Errorf("error preparing query GetGameRoomAndPlayerRows: %w", err)
	}
	if q.getGamesByRoomIdStmt, err = db.PrepareContext(ctx, getGamesByRoomId); err != nil {
		return nil, fmt.Errorf("error preparing query GetGamesByRoomId: %w", err)
	}
	if q.getPlayerStmt, err = db.PrepareContext(ctx, getPlayer); err != nil {
		return nil, fmt.Errorf("error preparing query GetPlayer: %w", err)
	}
	if q.startGameStmt, err = db.PrepareContext(ctx, startGame); err != nil {
		return nil, fmt.Errorf("error preparing query StartGame: %w", err)
	}
	if q.updateGameStmt, err = db.PrepareContext(ctx, updateGame); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateGame: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addPlayerToGameRoomStmt != nil {
		if cerr := q.addPlayerToGameRoomStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addPlayerToGameRoomStmt: %w", cerr)
		}
	}
	if q.createGameStmt != nil {
		if cerr := q.createGameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createGameStmt: %w", cerr)
		}
	}
	if q.createGameRoomStmt != nil {
		if cerr := q.createGameRoomStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createGameRoomStmt: %w", cerr)
		}
	}
	if q.createPlayerStmt != nil {
		if cerr := q.createPlayerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPlayerStmt: %w", cerr)
		}
	}
	if q.finishGameStmt != nil {
		if cerr := q.finishGameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing finishGameStmt: %w", cerr)
		}
	}
	if q.getGameStmt != nil {
		if cerr := q.getGameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGameStmt: %w", cerr)
		}
	}
	if q.getGameRoomAndPlayerRowsStmt != nil {
		if cerr := q.getGameRoomAndPlayerRowsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGameRoomAndPlayerRowsStmt: %w", cerr)
		}
	}
	if q.getGamesByRoomIdStmt != nil {
		if cerr := q.getGamesByRoomIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGamesByRoomIdStmt: %w", cerr)
		}
	}
	if q.getPlayerStmt != nil {
		if cerr := q.getPlayerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPlayerStmt: %w", cerr)
		}
	}
	if q.startGameStmt != nil {
		if cerr := q.startGameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing startGameStmt: %w", cerr)
		}
	}
	if q.updateGameStmt != nil {
		if cerr := q.updateGameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateGameStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                           DBTX
	tx                           *sql.Tx
	addPlayerToGameRoomStmt      *sql.Stmt
	createGameStmt               *sql.Stmt
	createGameRoomStmt           *sql.Stmt
	createPlayerStmt             *sql.Stmt
	finishGameStmt               *sql.Stmt
	getGameStmt                  *sql.Stmt
	getGameRoomAndPlayerRowsStmt *sql.Stmt
	getGamesByRoomIdStmt         *sql.Stmt
	getPlayerStmt                *sql.Stmt
	startGameStmt                *sql.Stmt
	updateGameStmt               *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                           tx,
		tx:                           tx,
		addPlayerToGameRoomStmt:      q.addPlayerToGameRoomStmt,
		createGameStmt:               q.createGameStmt,
		createGameRoomStmt:           q.createGameRoomStmt,
		createPlayerStmt:             q.createPlayerStmt,
		finishGameStmt:               q.finishGameStmt,
		getGameStmt:                  q.getGameStmt,
		getGameRoomAndPlayerRowsStmt: q.getGameRoomAndPlayerRowsStmt,
		getGamesByRoomIdStmt:         q.getGamesByRoomIdStmt,
		getPlayerStmt:                q.getPlayerStmt,
		startGameStmt:                q.startGameStmt,
		updateGameStmt:               q.updateGameStmt,
	}
}
